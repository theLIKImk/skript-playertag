import:
	java.lang.System
	java.sql.Date
	java.sql.ResultSet
	java.sql.SQLException
	java.sql.Connection
	java.sql.DriverManager
	java.sql.Statement
	java.sql.DatabaseMetaData
	java.sql.PreparedStatement
	

on load:
	set {-database} to sql_db_connect("jdbc:mysql://127.0.0.1:3306/", "easy-sql", "root", "liki2333")

	
	if {-database} is false:
		send "数据库连接失败"
		stop
	else:
		send "连接完毕：%{-database}%"
	
	set {_tabexsit} to sql_tabexist({-database},"connect_log")
	if {_tabexsit} is "false":
		sql_act({-database},"CREATE TABLE `connect_log` (`data` TEXT NULL)CHARACTER SET = utf8mb4 COLLATE='utf8mb4_unicode_ci'")
		sql_act({-database},"ALTER TABLE `connect_log` ADD COLUMN `time` TEXT NULL")

	sql_act({-database},"INSERT INTO `connect_log` (`data`, `time`) VALUES ('%{-database}%', '%now%')")
###################################################################
#  函数区
###################################################################
	
function sql_dbexist(database: object,dbname: text):: text:
	##检测库是否存在
	#获取数据
	set {_metadata} to {_database}.getMetaData()
	set {_resultSet} to {_metadata}.getCatalogs()
	
	#查询库是否存在
	while {_resultSet}.next():
		if {_resultSet}.getString(1) is {_dbname}:
			{_resultSet}.close()
			return "true"
	return "false"		
	
function sql_tabexist(database: object,tabname: text):: text:
	##检测表是否存在
	#获取数据
	set {_metadata} to {_database}.getMetaData()
	set {_resultSet} to {_metadata}.getTables(null, null, {_tabname}, {"TABLE"})
	
	# 判断结果集是否有数据
	if {_resultSet}.next():
		{_resultSet}.close()
		return "true"
	else:
		{_resultSet}.close()
		return "false"

	
function sql_disconnect(database: object):
	##断开数据库
	{_database}.close()


function sql_connect(url: text ,usr: text, pwd: text):: object:
	##连接数据库
	#连接数据库
	set {_database} to DriverManager.getConnection({_url}, {_usr}, {_pwd})
            
	if {_database} is null:
		set {_database} to false
	
	return {_database}


function sql_db_connect(url: text, db: text,usr: text, pwd: text):: object:
	##连接数据库的指定库
	#连接数据库
	set {_database} to DriverManager.getConnection({_url}, {_usr}, {_pwd})
            
	if {_database} is null:
		set {_database} to false
	else:
		#自动创建表
		set {_dbexist} to sql_dbexist({_database},"{_db}")
		if {_database} is "false":
			sql_act({_database},"CREATE DATABASE `%{_db}%`")
			sql_act({_database},"ALTER DATABASE %{_db}% CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci")
		sql_act({_database},"USE `%{_db}%`")

	return {_database}


function sql_act(database: object, sql: text):
	##SQL语句操作
	#获取Statement对象
	set {_statement} to {_database}.createStatement()
	
	#查询
	{_statement}.executeUpdate({_sql})
	{_statement}.close()


function sql_act_close(executequery: object):
	##关闭操作
	{executequery}.close()


function sql_act_get(database: object, sql: text):: object:
	##获取数据库资源
	#获取Statement对象
	set {_statement} to {_database}.createStatement()
	
	#执行语句
	set {_data} to {_statement}.executeQuery({_sql})
	
	#返回数值
	return {_data}


function sql_rm_tab_line_is_val(database: object, table: text, line: text, datatype: text, val: text):
	##删除指定表的行
	#sql语句
	set {_sql} to "DELETE FROM %{_table}% WHERE %{_line}% = ?"
	
	# 创建PreparedStatement对象
	set {_preparedStatement} to {_database}.prepareStatement({_sql})
		
	# 检索类型/设置要删除行中的指定ID
	if {_datatype} is "text":
		{_preparedStatement}.setString(1, {_val})
	else if {_datatype} is "number-int":
		set {_toval} to {_val} parsed as number
		{_preparedStatement}.setInt(1, {_toval})
	else if {_datatype} is "number-long":
		set {_toval} to {_val} parsed as number
		{_preparedStatement}.setLong(1, {_toval})
		
	# 执行删除操作
	set {_rowsDeleted} to {_preparedStatement}.executeUpdate()
		
	#关闭接口
	{_preparedStatement}.close()
function sql_search_table_val(database: object, table: text, column: text, datatype: text, val: text)::text:
	##搜索指定表的值
	#sql语句
	set {_sql} to "SELECT COUNT(*) FROM %{_table}% WHERE %{_column}% = ?"
	
	# 创建PreparedStatement对象
	set {_preparedStatement} to {_database}.prepareStatement({_sql})
		
	# 检索类型/设置要删除行中的指定ID
	if {_datatype} is "text":
		{_preparedStatement}.setString(1, {_val})
	else if {_datatype} is "number-int":
		set {_toval} to {_val} parsed as number
		{_preparedStatement}.setInt(1, {_toval})
	else if {_datatype} is "number-long":
		set {_toval} to {_val} parsed as number
		{_preparedStatement}.setLong(1, {_toval})

	# 执行查询操作
	set {_resultSet} to {_preparedStatement}.executeQuery()
	
	# 获取查询结果
	if {_resultSet}.next():
		set {_count} to {_resultSet}.getInt(1)

	#关闭接口
	{_preparedStatement}.close()
	
	# 如果_count 大于 0，说明  存在
	if {_count} > 0:
		return "true"
	else:
		return "false"


function sql_change_table_val(database: object, table: text, column: text, datatype: text, val: text, change_column: text, change_datatype: text, change_val: text):
	##修改指定值
	# SQL 语句
	set {_sql} to "UPDATE %{_table}% SET %{_change_column}% = ? WHERE %{_column}% = ?"

	# 创建预处理 SQL 语句
	set {_preparedStatement} to {_database}.prepareStatement({_sql})
	
	# 检索类型/定位并查找
	if {_change_datatype} is "text":
		{_preparedStatement}.setString(1, {_change_val})
	else if {_change_datatype} is "number-int":
		set {_to_change_val} to {_change_val} parsed as number
		{_preparedStatement}.setInt(1, {_to_change_val})
	else if {_change_datatype} is "number-long":
		set {_to_change_val} to {_change_val} parsed as number
		{_preparedStatement}.setLong(1, {_to_change_val})

	if {_datatype} is "text":
		{_preparedStatement}.setString(2, {_val})
	else if {_datatype} is "number-int":
		set {_toval} to {_val} parsed as number
		{_preparedStatement}.setInt(2, {_toval})
	else if {_datatype} is "number-long":
		set {_toval} to {_val} parsed as number
		{_preparedStatement}.setLong(2, {_toval})


	# 执行更新
	{_preparedStatement}.executeUpdate()

	# 关闭
	{_preparedStatement}.close()
